/*
 * Copyright (c) 2016 ReportTable Alexander Seitz
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 *
 */
package analyse;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;

import utilities.OutputStrings;
import utilities.Pipelines;

public class AnalyzeCaptureOnTarget extends AbstractAnalyze {
    // member variables
    private String numCaptureOnTargetReads = OutputStrings.notFound;
    private String version = OutputStrings.notFound;

    /**
     * Constructor, the given Folder should point to the root directory of
     * the sample, containing the folders generated by the pipeline.
     *
     * @param sampleFolder
     */
    public AnalyzeCaptureOnTarget(File sampleFolder){
        super(sampleFolder);
        analyzeCaptureOnTarget();
    }

    /**
     * Find the relevant folders for each input sample file
     */
    private void analyzeCaptureOnTarget() {
        File dataDir = this.getCurrFolder(Pipelines.CaptureOnTarget);
        if (dataDir != null) {
            String[] names = dataDir.list();
            for (String name : filterDataDir(names)) {
                File currFile = new File(dataDir.getAbsolutePath() + "/" + name);
                if (currFile.isFile() && currFile.getName().endsWith(".ontarget")) {
                    parseBedCov(currFile);
                    break;
                }
            }
        }
    }

    private void parseBedCov (File currFile) {
        try {
            @SuppressWarnings("resource")
            BufferedReader br = new BufferedReader(new FileReader(currFile));
            String currLine = "";
            while((currLine = br.readLine()) != null) {
                if ( !currLine.startsWith("#") ) {
                    try {
                        numCaptureOnTargetReads = Long.valueOf(currLine).toString();
                        break;
                    } catch ( NumberFormatException nfe) {
                        System.err.println("nfe parsing targetcov");
                        break;
                    }
                }
            }
        } catch (IOException e) {
        }
    }

    /**
     * @return the num of reads covering the captured regions
     */
    public String getNumCaptureOnTargetReads() {
        return numCaptureOnTargetReads;
    }
}